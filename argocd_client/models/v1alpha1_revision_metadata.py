# coding: utf-8
# Copyright (c) 2020, Globo (https://github.com/globocom)
# License: BSD-3-Clause

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argocd_client.configuration import Configuration


class V1alpha1RevisionMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'author': 'str',
        'date': 'V1Time',
        'message': 'str',
        'signature_info': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'author': 'author',
        'date': 'date',
        'message': 'message',
        'signature_info': 'signatureInfo',
        'tags': 'tags'
    }

    def __init__(self, author=None, date=None, message=None, signature_info=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1RevisionMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._author = None
        self._date = None
        self._message = None
        self._signature_info = None
        self._tags = None
        self.discriminator = None

        if author is not None:
            self.author = author
        if date is not None:
            self.date = date
        if message is not None:
            self.message = message
        if signature_info is not None:
            self.signature_info = signature_info
        if tags is not None:
            self.tags = tags

    @property
    def author(self):
        """Gets the author of this V1alpha1RevisionMetadata.  # noqa: E501


        :return: The author of this V1alpha1RevisionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this V1alpha1RevisionMetadata.


        :param author: The author of this V1alpha1RevisionMetadata.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def date(self):
        """Gets the date of this V1alpha1RevisionMetadata.  # noqa: E501


        :return: The date of this V1alpha1RevisionMetadata.  # noqa: E501
        :rtype: V1Time
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this V1alpha1RevisionMetadata.


        :param date: The date of this V1alpha1RevisionMetadata.  # noqa: E501
        :type: V1Time
        """

        self._date = date

    @property
    def message(self):
        """Gets the message of this V1alpha1RevisionMetadata.  # noqa: E501


        :return: The message of this V1alpha1RevisionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this V1alpha1RevisionMetadata.


        :param message: The message of this V1alpha1RevisionMetadata.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def signature_info(self):
        """Gets the signature_info of this V1alpha1RevisionMetadata.  # noqa: E501


        :return: The signature_info of this V1alpha1RevisionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._signature_info

    @signature_info.setter
    def signature_info(self, signature_info):
        """Sets the signature_info of this V1alpha1RevisionMetadata.


        :param signature_info: The signature_info of this V1alpha1RevisionMetadata.  # noqa: E501
        :type: str
        """

        self._signature_info = signature_info

    @property
    def tags(self):
        """Gets the tags of this V1alpha1RevisionMetadata.  # noqa: E501


        :return: The tags of this V1alpha1RevisionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this V1alpha1RevisionMetadata.


        :param tags: The tags of this V1alpha1RevisionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1RevisionMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1RevisionMetadata):
            return True

        return self.to_dict() != other.to_dict()
