# coding: utf-8
# Copyright (c) 2020, Globo (https://github.com/globocom)
# License: BSD-3-Clause

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argocd_client.configuration import Configuration


class RepositoryManifestResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'manifests': 'list[str]',
        'namespace': 'str',
        'revision': 'str',
        'server': 'str',
        'source_type': 'str',
        'verify_result': 'str'
    }

    attribute_map = {
        'manifests': 'manifests',
        'namespace': 'namespace',
        'revision': 'revision',
        'server': 'server',
        'source_type': 'sourceType',
        'verify_result': 'verifyResult'
    }

    def __init__(self, manifests=None, namespace=None, revision=None, server=None, source_type=None, verify_result=None, local_vars_configuration=None):  # noqa: E501
        """RepositoryManifestResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._manifests = None
        self._namespace = None
        self._revision = None
        self._server = None
        self._source_type = None
        self._verify_result = None
        self.discriminator = None

        if manifests is not None:
            self.manifests = manifests
        if namespace is not None:
            self.namespace = namespace
        if revision is not None:
            self.revision = revision
        if server is not None:
            self.server = server
        if source_type is not None:
            self.source_type = source_type
        if verify_result is not None:
            self.verify_result = verify_result

    @property
    def manifests(self):
        """Gets the manifests of this RepositoryManifestResponse.  # noqa: E501


        :return: The manifests of this RepositoryManifestResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._manifests

    @manifests.setter
    def manifests(self, manifests):
        """Sets the manifests of this RepositoryManifestResponse.


        :param manifests: The manifests of this RepositoryManifestResponse.  # noqa: E501
        :type: list[str]
        """

        self._manifests = manifests

    @property
    def namespace(self):
        """Gets the namespace of this RepositoryManifestResponse.  # noqa: E501


        :return: The namespace of this RepositoryManifestResponse.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this RepositoryManifestResponse.


        :param namespace: The namespace of this RepositoryManifestResponse.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def revision(self):
        """Gets the revision of this RepositoryManifestResponse.  # noqa: E501


        :return: The revision of this RepositoryManifestResponse.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this RepositoryManifestResponse.


        :param revision: The revision of this RepositoryManifestResponse.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def server(self):
        """Gets the server of this RepositoryManifestResponse.  # noqa: E501


        :return: The server of this RepositoryManifestResponse.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this RepositoryManifestResponse.


        :param server: The server of this RepositoryManifestResponse.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def source_type(self):
        """Gets the source_type of this RepositoryManifestResponse.  # noqa: E501


        :return: The source_type of this RepositoryManifestResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this RepositoryManifestResponse.


        :param source_type: The source_type of this RepositoryManifestResponse.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def verify_result(self):
        """Gets the verify_result of this RepositoryManifestResponse.  # noqa: E501


        :return: The verify_result of this RepositoryManifestResponse.  # noqa: E501
        :rtype: str
        """
        return self._verify_result

    @verify_result.setter
    def verify_result(self, verify_result):
        """Sets the verify_result of this RepositoryManifestResponse.


        :param verify_result: The verify_result of this RepositoryManifestResponse.  # noqa: E501
        :type: str
        """

        self._verify_result = verify_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryManifestResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepositoryManifestResponse):
            return True

        return self.to_dict() != other.to_dict()
