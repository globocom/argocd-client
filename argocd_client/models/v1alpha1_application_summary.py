# coding: utf-8
# Copyright (c) 2020, Globo (https://github.com/globocom)
# License: BSD-3-Clause

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argocd_client.configuration import Configuration


class V1alpha1ApplicationSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'external_ur_ls': 'list[str]',
        'images': 'list[str]'
    }

    attribute_map = {
        'external_ur_ls': 'externalURLs',
        'images': 'images'
    }

    def __init__(self, external_ur_ls=None, images=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1ApplicationSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._external_ur_ls = None
        self._images = None
        self.discriminator = None

        if external_ur_ls is not None:
            self.external_ur_ls = external_ur_ls
        if images is not None:
            self.images = images

    @property
    def external_ur_ls(self):
        """Gets the external_ur_ls of this V1alpha1ApplicationSummary.  # noqa: E501

        ExternalURLs holds all external URLs of application child resources.  # noqa: E501

        :return: The external_ur_ls of this V1alpha1ApplicationSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_ur_ls

    @external_ur_ls.setter
    def external_ur_ls(self, external_ur_ls):
        """Sets the external_ur_ls of this V1alpha1ApplicationSummary.

        ExternalURLs holds all external URLs of application child resources.  # noqa: E501

        :param external_ur_ls: The external_ur_ls of this V1alpha1ApplicationSummary.  # noqa: E501
        :type: list[str]
        """

        self._external_ur_ls = external_ur_ls

    @property
    def images(self):
        """Gets the images of this V1alpha1ApplicationSummary.  # noqa: E501

        Images holds all images of application child resources.  # noqa: E501

        :return: The images of this V1alpha1ApplicationSummary.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this V1alpha1ApplicationSummary.

        Images holds all images of application child resources.  # noqa: E501

        :param images: The images of this V1alpha1ApplicationSummary.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ApplicationSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1ApplicationSummary):
            return True

        return self.to_dict() != other.to_dict()
