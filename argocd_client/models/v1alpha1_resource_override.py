# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argocd_client.configuration import Configuration


class V1alpha1ResourceOverride(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'actions': 'str',
        'health_lua': 'str',
        'ignore_differences': 'V1alpha1OverrideIgnoreDiff',
        'known_type_fields': 'list[V1alpha1KnownTypeField]'
    }

    attribute_map = {
        'actions': 'actions',
        'health_lua': 'healthLua',
        'ignore_differences': 'ignoreDifferences',
        'known_type_fields': 'knownTypeFields'
    }

    def __init__(self, actions=None, health_lua=None, ignore_differences=None, known_type_fields=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1ResourceOverride - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._actions = None
        self._health_lua = None
        self._ignore_differences = None
        self._known_type_fields = None
        self.discriminator = None

        if actions is not None:
            self.actions = actions
        if health_lua is not None:
            self.health_lua = health_lua
        if ignore_differences is not None:
            self.ignore_differences = ignore_differences
        if known_type_fields is not None:
            self.known_type_fields = known_type_fields

    @property
    def actions(self):
        """Gets the actions of this V1alpha1ResourceOverride.  # noqa: E501


        :return: The actions of this V1alpha1ResourceOverride.  # noqa: E501
        :rtype: str
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this V1alpha1ResourceOverride.


        :param actions: The actions of this V1alpha1ResourceOverride.  # noqa: E501
        :type: str
        """

        self._actions = actions

    @property
    def health_lua(self):
        """Gets the health_lua of this V1alpha1ResourceOverride.  # noqa: E501


        :return: The health_lua of this V1alpha1ResourceOverride.  # noqa: E501
        :rtype: str
        """
        return self._health_lua

    @health_lua.setter
    def health_lua(self, health_lua):
        """Sets the health_lua of this V1alpha1ResourceOverride.


        :param health_lua: The health_lua of this V1alpha1ResourceOverride.  # noqa: E501
        :type: str
        """

        self._health_lua = health_lua

    @property
    def ignore_differences(self):
        """Gets the ignore_differences of this V1alpha1ResourceOverride.  # noqa: E501


        :return: The ignore_differences of this V1alpha1ResourceOverride.  # noqa: E501
        :rtype: V1alpha1OverrideIgnoreDiff
        """
        return self._ignore_differences

    @ignore_differences.setter
    def ignore_differences(self, ignore_differences):
        """Sets the ignore_differences of this V1alpha1ResourceOverride.


        :param ignore_differences: The ignore_differences of this V1alpha1ResourceOverride.  # noqa: E501
        :type: V1alpha1OverrideIgnoreDiff
        """

        self._ignore_differences = ignore_differences

    @property
    def known_type_fields(self):
        """Gets the known_type_fields of this V1alpha1ResourceOverride.  # noqa: E501


        :return: The known_type_fields of this V1alpha1ResourceOverride.  # noqa: E501
        :rtype: list[V1alpha1KnownTypeField]
        """
        return self._known_type_fields

    @known_type_fields.setter
    def known_type_fields(self, known_type_fields):
        """Sets the known_type_fields of this V1alpha1ResourceOverride.


        :param known_type_fields: The known_type_fields of this V1alpha1ResourceOverride.  # noqa: E501
        :type: list[V1alpha1KnownTypeField]
        """

        self._known_type_fields = known_type_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ResourceOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1ResourceOverride):
            return True

        return self.to_dict() != other.to_dict()
