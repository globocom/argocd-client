# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argocd_client.configuration import Configuration


class V1alpha1RepositoryCertificate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cert_data': 'str',
        'cert_info': 'str',
        'cert_sub_type': 'str',
        'cert_type': 'str',
        'server_name': 'str'
    }

    attribute_map = {
        'cert_data': 'certData',
        'cert_info': 'certInfo',
        'cert_sub_type': 'certSubType',
        'cert_type': 'certType',
        'server_name': 'serverName'
    }

    def __init__(self, cert_data=None, cert_info=None, cert_sub_type=None, cert_type=None, server_name=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1RepositoryCertificate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cert_data = None
        self._cert_info = None
        self._cert_sub_type = None
        self._cert_type = None
        self._server_name = None
        self.discriminator = None

        if cert_data is not None:
            self.cert_data = cert_data
        if cert_info is not None:
            self.cert_info = cert_info
        if cert_sub_type is not None:
            self.cert_sub_type = cert_sub_type
        if cert_type is not None:
            self.cert_type = cert_type
        if server_name is not None:
            self.server_name = server_name

    @property
    def cert_data(self):
        """Gets the cert_data of this V1alpha1RepositoryCertificate.  # noqa: E501


        :return: The cert_data of this V1alpha1RepositoryCertificate.  # noqa: E501
        :rtype: str
        """
        return self._cert_data

    @cert_data.setter
    def cert_data(self, cert_data):
        """Sets the cert_data of this V1alpha1RepositoryCertificate.


        :param cert_data: The cert_data of this V1alpha1RepositoryCertificate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                cert_data is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', cert_data)):  # noqa: E501
            raise ValueError(r"Invalid value for `cert_data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._cert_data = cert_data

    @property
    def cert_info(self):
        """Gets the cert_info of this V1alpha1RepositoryCertificate.  # noqa: E501


        :return: The cert_info of this V1alpha1RepositoryCertificate.  # noqa: E501
        :rtype: str
        """
        return self._cert_info

    @cert_info.setter
    def cert_info(self, cert_info):
        """Sets the cert_info of this V1alpha1RepositoryCertificate.


        :param cert_info: The cert_info of this V1alpha1RepositoryCertificate.  # noqa: E501
        :type: str
        """

        self._cert_info = cert_info

    @property
    def cert_sub_type(self):
        """Gets the cert_sub_type of this V1alpha1RepositoryCertificate.  # noqa: E501


        :return: The cert_sub_type of this V1alpha1RepositoryCertificate.  # noqa: E501
        :rtype: str
        """
        return self._cert_sub_type

    @cert_sub_type.setter
    def cert_sub_type(self, cert_sub_type):
        """Sets the cert_sub_type of this V1alpha1RepositoryCertificate.


        :param cert_sub_type: The cert_sub_type of this V1alpha1RepositoryCertificate.  # noqa: E501
        :type: str
        """

        self._cert_sub_type = cert_sub_type

    @property
    def cert_type(self):
        """Gets the cert_type of this V1alpha1RepositoryCertificate.  # noqa: E501


        :return: The cert_type of this V1alpha1RepositoryCertificate.  # noqa: E501
        :rtype: str
        """
        return self._cert_type

    @cert_type.setter
    def cert_type(self, cert_type):
        """Sets the cert_type of this V1alpha1RepositoryCertificate.


        :param cert_type: The cert_type of this V1alpha1RepositoryCertificate.  # noqa: E501
        :type: str
        """

        self._cert_type = cert_type

    @property
    def server_name(self):
        """Gets the server_name of this V1alpha1RepositoryCertificate.  # noqa: E501


        :return: The server_name of this V1alpha1RepositoryCertificate.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this V1alpha1RepositoryCertificate.


        :param server_name: The server_name of this V1alpha1RepositoryCertificate.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1RepositoryCertificate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1RepositoryCertificate):
            return True

        return self.to_dict() != other.to_dict()
