# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argocd_client.configuration import Configuration


class VersionVersionMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'build_date': 'str',
        'compiler': 'str',
        'git_commit': 'str',
        'git_tag': 'str',
        'git_tree_state': 'str',
        'go_version': 'str',
        'helm_version': 'str',
        'ksonnet_version': 'str',
        'kubectl_version': 'str',
        'kustomize_version': 'str',
        'platform': 'str',
        'version': 'str'
    }

    attribute_map = {
        'build_date': 'BuildDate',
        'compiler': 'Compiler',
        'git_commit': 'GitCommit',
        'git_tag': 'GitTag',
        'git_tree_state': 'GitTreeState',
        'go_version': 'GoVersion',
        'helm_version': 'HelmVersion',
        'ksonnet_version': 'KsonnetVersion',
        'kubectl_version': 'KubectlVersion',
        'kustomize_version': 'KustomizeVersion',
        'platform': 'Platform',
        'version': 'Version'
    }

    def __init__(self, build_date=None, compiler=None, git_commit=None, git_tag=None, git_tree_state=None, go_version=None, helm_version=None, ksonnet_version=None, kubectl_version=None, kustomize_version=None, platform=None, version=None, local_vars_configuration=None):  # noqa: E501
        """VersionVersionMessage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._build_date = None
        self._compiler = None
        self._git_commit = None
        self._git_tag = None
        self._git_tree_state = None
        self._go_version = None
        self._helm_version = None
        self._ksonnet_version = None
        self._kubectl_version = None
        self._kustomize_version = None
        self._platform = None
        self._version = None
        self.discriminator = None

        if build_date is not None:
            self.build_date = build_date
        if compiler is not None:
            self.compiler = compiler
        if git_commit is not None:
            self.git_commit = git_commit
        if git_tag is not None:
            self.git_tag = git_tag
        if git_tree_state is not None:
            self.git_tree_state = git_tree_state
        if go_version is not None:
            self.go_version = go_version
        if helm_version is not None:
            self.helm_version = helm_version
        if ksonnet_version is not None:
            self.ksonnet_version = ksonnet_version
        if kubectl_version is not None:
            self.kubectl_version = kubectl_version
        if kustomize_version is not None:
            self.kustomize_version = kustomize_version
        if platform is not None:
            self.platform = platform
        if version is not None:
            self.version = version

    @property
    def build_date(self):
        """Gets the build_date of this VersionVersionMessage.  # noqa: E501


        :return: The build_date of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._build_date

    @build_date.setter
    def build_date(self, build_date):
        """Sets the build_date of this VersionVersionMessage.


        :param build_date: The build_date of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._build_date = build_date

    @property
    def compiler(self):
        """Gets the compiler of this VersionVersionMessage.  # noqa: E501


        :return: The compiler of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._compiler

    @compiler.setter
    def compiler(self, compiler):
        """Sets the compiler of this VersionVersionMessage.


        :param compiler: The compiler of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._compiler = compiler

    @property
    def git_commit(self):
        """Gets the git_commit of this VersionVersionMessage.  # noqa: E501


        :return: The git_commit of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._git_commit

    @git_commit.setter
    def git_commit(self, git_commit):
        """Sets the git_commit of this VersionVersionMessage.


        :param git_commit: The git_commit of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._git_commit = git_commit

    @property
    def git_tag(self):
        """Gets the git_tag of this VersionVersionMessage.  # noqa: E501


        :return: The git_tag of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._git_tag

    @git_tag.setter
    def git_tag(self, git_tag):
        """Sets the git_tag of this VersionVersionMessage.


        :param git_tag: The git_tag of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._git_tag = git_tag

    @property
    def git_tree_state(self):
        """Gets the git_tree_state of this VersionVersionMessage.  # noqa: E501


        :return: The git_tree_state of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._git_tree_state

    @git_tree_state.setter
    def git_tree_state(self, git_tree_state):
        """Sets the git_tree_state of this VersionVersionMessage.


        :param git_tree_state: The git_tree_state of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._git_tree_state = git_tree_state

    @property
    def go_version(self):
        """Gets the go_version of this VersionVersionMessage.  # noqa: E501


        :return: The go_version of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._go_version

    @go_version.setter
    def go_version(self, go_version):
        """Sets the go_version of this VersionVersionMessage.


        :param go_version: The go_version of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._go_version = go_version

    @property
    def helm_version(self):
        """Gets the helm_version of this VersionVersionMessage.  # noqa: E501


        :return: The helm_version of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._helm_version

    @helm_version.setter
    def helm_version(self, helm_version):
        """Sets the helm_version of this VersionVersionMessage.


        :param helm_version: The helm_version of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._helm_version = helm_version

    @property
    def ksonnet_version(self):
        """Gets the ksonnet_version of this VersionVersionMessage.  # noqa: E501


        :return: The ksonnet_version of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._ksonnet_version

    @ksonnet_version.setter
    def ksonnet_version(self, ksonnet_version):
        """Sets the ksonnet_version of this VersionVersionMessage.


        :param ksonnet_version: The ksonnet_version of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._ksonnet_version = ksonnet_version

    @property
    def kubectl_version(self):
        """Gets the kubectl_version of this VersionVersionMessage.  # noqa: E501


        :return: The kubectl_version of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._kubectl_version

    @kubectl_version.setter
    def kubectl_version(self, kubectl_version):
        """Sets the kubectl_version of this VersionVersionMessage.


        :param kubectl_version: The kubectl_version of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._kubectl_version = kubectl_version

    @property
    def kustomize_version(self):
        """Gets the kustomize_version of this VersionVersionMessage.  # noqa: E501


        :return: The kustomize_version of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._kustomize_version

    @kustomize_version.setter
    def kustomize_version(self, kustomize_version):
        """Sets the kustomize_version of this VersionVersionMessage.


        :param kustomize_version: The kustomize_version of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._kustomize_version = kustomize_version

    @property
    def platform(self):
        """Gets the platform of this VersionVersionMessage.  # noqa: E501


        :return: The platform of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this VersionVersionMessage.


        :param platform: The platform of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def version(self):
        """Gets the version of this VersionVersionMessage.  # noqa: E501


        :return: The version of this VersionVersionMessage.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VersionVersionMessage.


        :param version: The version of this VersionVersionMessage.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionVersionMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VersionVersionMessage):
            return True

        return self.to_dict() != other.to_dict()
