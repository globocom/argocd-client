# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argocd_client.configuration import Configuration


class ClusterOIDCConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cli_client_id': 'str',
        'client_id': 'str',
        'id_token_claims': 'dict(str, OidcClaim)',
        'issuer': 'str',
        'name': 'str',
        'scopes': 'list[str]'
    }

    attribute_map = {
        'cli_client_id': 'cliClientID',
        'client_id': 'clientID',
        'id_token_claims': 'idTokenClaims',
        'issuer': 'issuer',
        'name': 'name',
        'scopes': 'scopes'
    }

    def __init__(self, cli_client_id=None, client_id=None, id_token_claims=None, issuer=None, name=None, scopes=None, local_vars_configuration=None):  # noqa: E501
        """ClusterOIDCConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cli_client_id = None
        self._client_id = None
        self._id_token_claims = None
        self._issuer = None
        self._name = None
        self._scopes = None
        self.discriminator = None

        if cli_client_id is not None:
            self.cli_client_id = cli_client_id
        if client_id is not None:
            self.client_id = client_id
        if id_token_claims is not None:
            self.id_token_claims = id_token_claims
        if issuer is not None:
            self.issuer = issuer
        if name is not None:
            self.name = name
        if scopes is not None:
            self.scopes = scopes

    @property
    def cli_client_id(self):
        """Gets the cli_client_id of this ClusterOIDCConfig.  # noqa: E501


        :return: The cli_client_id of this ClusterOIDCConfig.  # noqa: E501
        :rtype: str
        """
        return self._cli_client_id

    @cli_client_id.setter
    def cli_client_id(self, cli_client_id):
        """Sets the cli_client_id of this ClusterOIDCConfig.


        :param cli_client_id: The cli_client_id of this ClusterOIDCConfig.  # noqa: E501
        :type: str
        """

        self._cli_client_id = cli_client_id

    @property
    def client_id(self):
        """Gets the client_id of this ClusterOIDCConfig.  # noqa: E501


        :return: The client_id of this ClusterOIDCConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ClusterOIDCConfig.


        :param client_id: The client_id of this ClusterOIDCConfig.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def id_token_claims(self):
        """Gets the id_token_claims of this ClusterOIDCConfig.  # noqa: E501


        :return: The id_token_claims of this ClusterOIDCConfig.  # noqa: E501
        :rtype: dict(str, OidcClaim)
        """
        return self._id_token_claims

    @id_token_claims.setter
    def id_token_claims(self, id_token_claims):
        """Sets the id_token_claims of this ClusterOIDCConfig.


        :param id_token_claims: The id_token_claims of this ClusterOIDCConfig.  # noqa: E501
        :type: dict(str, OidcClaim)
        """

        self._id_token_claims = id_token_claims

    @property
    def issuer(self):
        """Gets the issuer of this ClusterOIDCConfig.  # noqa: E501


        :return: The issuer of this ClusterOIDCConfig.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this ClusterOIDCConfig.


        :param issuer: The issuer of this ClusterOIDCConfig.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def name(self):
        """Gets the name of this ClusterOIDCConfig.  # noqa: E501


        :return: The name of this ClusterOIDCConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterOIDCConfig.


        :param name: The name of this ClusterOIDCConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def scopes(self):
        """Gets the scopes of this ClusterOIDCConfig.  # noqa: E501


        :return: The scopes of this ClusterOIDCConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ClusterOIDCConfig.


        :param scopes: The scopes of this ClusterOIDCConfig.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterOIDCConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterOIDCConfig):
            return True

        return self.to_dict() != other.to_dict()
