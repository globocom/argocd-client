# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argocd_client.configuration import Configuration


class ApplicationApplicationSyncWindowsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_windows': 'list[ApplicationApplicationSyncWindow]',
        'assigned_windows': 'list[ApplicationApplicationSyncWindow]',
        'can_sync': 'bool'
    }

    attribute_map = {
        'active_windows': 'activeWindows',
        'assigned_windows': 'assignedWindows',
        'can_sync': 'canSync'
    }

    def __init__(self, active_windows=None, assigned_windows=None, can_sync=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationApplicationSyncWindowsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active_windows = None
        self._assigned_windows = None
        self._can_sync = None
        self.discriminator = None

        if active_windows is not None:
            self.active_windows = active_windows
        if assigned_windows is not None:
            self.assigned_windows = assigned_windows
        if can_sync is not None:
            self.can_sync = can_sync

    @property
    def active_windows(self):
        """Gets the active_windows of this ApplicationApplicationSyncWindowsResponse.  # noqa: E501


        :return: The active_windows of this ApplicationApplicationSyncWindowsResponse.  # noqa: E501
        :rtype: list[ApplicationApplicationSyncWindow]
        """
        return self._active_windows

    @active_windows.setter
    def active_windows(self, active_windows):
        """Sets the active_windows of this ApplicationApplicationSyncWindowsResponse.


        :param active_windows: The active_windows of this ApplicationApplicationSyncWindowsResponse.  # noqa: E501
        :type: list[ApplicationApplicationSyncWindow]
        """

        self._active_windows = active_windows

    @property
    def assigned_windows(self):
        """Gets the assigned_windows of this ApplicationApplicationSyncWindowsResponse.  # noqa: E501


        :return: The assigned_windows of this ApplicationApplicationSyncWindowsResponse.  # noqa: E501
        :rtype: list[ApplicationApplicationSyncWindow]
        """
        return self._assigned_windows

    @assigned_windows.setter
    def assigned_windows(self, assigned_windows):
        """Sets the assigned_windows of this ApplicationApplicationSyncWindowsResponse.


        :param assigned_windows: The assigned_windows of this ApplicationApplicationSyncWindowsResponse.  # noqa: E501
        :type: list[ApplicationApplicationSyncWindow]
        """

        self._assigned_windows = assigned_windows

    @property
    def can_sync(self):
        """Gets the can_sync of this ApplicationApplicationSyncWindowsResponse.  # noqa: E501


        :return: The can_sync of this ApplicationApplicationSyncWindowsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_sync

    @can_sync.setter
    def can_sync(self, can_sync):
        """Sets the can_sync of this ApplicationApplicationSyncWindowsResponse.


        :param can_sync: The can_sync of this ApplicationApplicationSyncWindowsResponse.  # noqa: E501
        :type: bool
        """

        self._can_sync = can_sync

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationApplicationSyncWindowsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationApplicationSyncWindowsResponse):
            return True

        return self.to_dict() != other.to_dict()
