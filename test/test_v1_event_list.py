# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import argocd_client
from argocd_client.models.v1_event_list import V1EventList  # noqa: E501
from argocd_client.rest import ApiException

class TestV1EventList(unittest.TestCase):
    """V1EventList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1EventList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = argocd_client.models.v1_event_list.V1EventList()  # noqa: E501
        if include_optional :
            return V1EventList(
                items = [
                    argocd_client.models.v1_event.v1Event(
                        action = '0', 
                        count = 56, 
                        event_time = argocd_client.models.v1_micro_time.v1MicroTime(
                            nanos = 56, 
                            seconds = '0', ), 
                        first_timestamp = argocd_client.models.v1_time.v1Time(
                            nanos = 56, 
                            seconds = '0', ), 
                        involved_object = argocd_client.models.object_reference_contains_enough_information_to_let_you_inspect_or_modify_the_referred_object/
___
new_uses_of_this_type_are_discouraged_because_of_difficulty_describing_its_usage_when_embedded_in_ap_is/
_1/_ignored_fields/__it_includes_many_fields_which_are_not_generally_honored/__for_instance,_resource_version_and_field_path_are_both_very_rarely_valid_in_actual_usage/
_2/_invalid_usage_help/__it_is_impossible_to_add_specific_help_for_individual_usage/__in_most_embedded_usages,_there_are_particular
____restrictions_like,_"must_refer_only_to_types_a_and_b"_or_"uid_not_honored"_or_"name_must_be_restricted"/
____those_cannot_be_well_described_when_embedded/
_3/_inconsistent_validation/__because_the_usages_are_different,_the_validation_rules_are_different_by_usage,_which_makes_it_hard_for_users_to_predict_what_will_happen/
_4/_the_fields_are_both_imprecise_and_overly_precise/__kind_is_not_a_precise_mapping_to_a_url/_this_can_produce_ambiguity
____during_interpretation_and_require_a_rest_mapping/__in_most_cases,_the_dependency_is_on_the_group,resource_tuple
____and_the_version_of_the_actual_struct_is_irrelevant/
_5/_we_cannot_easily_change_it/__because_this_type_is_embedded_in_many_locations,_updates_to_this_type
____will_affect_numerous_schemas/__don't_make_new_ap_is_embed_an_underspecified_api_type_they_do_not_control/
instead_of_using_this_type,_create_a_locally_provided_and_used_type_that_is_well_focused_on_your_reference/
for_example,_service_references_for_admission_registration:_https://github/com/kubernetes/api/blob/release_1/17/admissionregistration/v1/types/go#l533_/
+k8s:deepcopy_gen:interfaces=k8s/io/apimachinery/pkg/runtime/object.ObjectReference contains enough information to let you inspect or modify the referred object.
---
New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.
 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.
 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular
    restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".
    Those cannot be well described when embedded.
 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.
 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity
    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple
    and the version of the actual struct is irrelevant.
 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type
    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
Instead of using this type, create a locally provided and used type that is well-focused on your reference.
For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object(
                            api_version = '0', 
                            field_path = '0', 
                            kind = '0', 
                            name = '0', 
                            namespace = '0', 
                            resource_version = '0', 
                            uid = '0', ), 
                        last_timestamp = argocd_client.models.v1_time.v1Time(
                            nanos = 56, 
                            seconds = '0', ), 
                        message = '0', 
                        metadata = argocd_client.models.v1_object_meta.v1ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = argocd_client.models.v1_time.v1Time(
                                nanos = 56, 
                                seconds = '0', ), 
                            deletion_grace_period_seconds = '0', 
                            deletion_timestamp = argocd_client.models.v1_time.v1Time(
                                nanos = 56, 
                                seconds = '0', ), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = '0', 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                argocd_client.models.v1_managed_fields_entry.v1ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = argocd_client.models.v1_fields_v1.v1FieldsV1(
                                        raw = 'YQ==', ), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = argocd_client.models.v1_time.v1Time(
                                        nanos = 56, 
                                        seconds = '0', ), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                argocd_client.models.v1_owner_reference.v1OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        reason = '0', 
                        related = argocd_client.models.object_reference_contains_enough_information_to_let_you_inspect_or_modify_the_referred_object/
___
new_uses_of_this_type_are_discouraged_because_of_difficulty_describing_its_usage_when_embedded_in_ap_is/
_1/_ignored_fields/__it_includes_many_fields_which_are_not_generally_honored/__for_instance,_resource_version_and_field_path_are_both_very_rarely_valid_in_actual_usage/
_2/_invalid_usage_help/__it_is_impossible_to_add_specific_help_for_individual_usage/__in_most_embedded_usages,_there_are_particular
____restrictions_like,_"must_refer_only_to_types_a_and_b"_or_"uid_not_honored"_or_"name_must_be_restricted"/
____those_cannot_be_well_described_when_embedded/
_3/_inconsistent_validation/__because_the_usages_are_different,_the_validation_rules_are_different_by_usage,_which_makes_it_hard_for_users_to_predict_what_will_happen/
_4/_the_fields_are_both_imprecise_and_overly_precise/__kind_is_not_a_precise_mapping_to_a_url/_this_can_produce_ambiguity
____during_interpretation_and_require_a_rest_mapping/__in_most_cases,_the_dependency_is_on_the_group,resource_tuple
____and_the_version_of_the_actual_struct_is_irrelevant/
_5/_we_cannot_easily_change_it/__because_this_type_is_embedded_in_many_locations,_updates_to_this_type
____will_affect_numerous_schemas/__don't_make_new_ap_is_embed_an_underspecified_api_type_they_do_not_control/
instead_of_using_this_type,_create_a_locally_provided_and_used_type_that_is_well_focused_on_your_reference/
for_example,_service_references_for_admission_registration:_https://github/com/kubernetes/api/blob/release_1/17/admissionregistration/v1/types/go#l533_/
+k8s:deepcopy_gen:interfaces=k8s/io/apimachinery/pkg/runtime/object.ObjectReference contains enough information to let you inspect or modify the referred object.
---
New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.
 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.
 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular
    restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".
    Those cannot be well described when embedded.
 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.
 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity
    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple
    and the version of the actual struct is irrelevant.
 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type
    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
Instead of using this type, create a locally provided and used type that is well-focused on your reference.
For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object(
                            api_version = '0', 
                            field_path = '0', 
                            kind = '0', 
                            name = '0', 
                            namespace = '0', 
                            resource_version = '0', 
                            uid = '0', ), 
                        reporting_component = '0', 
                        reporting_instance = '0', 
                        series = argocd_client.models.v1_event_series.v1EventSeries(
                            count = 56, 
                            last_observed_time = argocd_client.models.v1_micro_time.v1MicroTime(
                                nanos = 56, 
                                seconds = '0', ), 
                            state = '0', ), 
                        source = argocd_client.models.v1_event_source.v1EventSource(
                            component = '0', 
                            host = '0', ), 
                        type = '0', )
                    ], 
                metadata = argocd_client.models.v1_list_meta.v1ListMeta(
                    continue = '0', 
                    remaining_item_count = '0', 
                    resource_version = '0', 
                    self_link = '0', )
            )
        else :
            return V1EventList(
        )

    def testV1EventList(self):
        """Test V1EventList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
