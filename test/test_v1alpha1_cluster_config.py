# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import argocd_client
from argocd_client.models.v1alpha1_cluster_config import V1alpha1ClusterConfig  # noqa: E501
from argocd_client.rest import ApiException

class TestV1alpha1ClusterConfig(unittest.TestCase):
    """V1alpha1ClusterConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha1ClusterConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = argocd_client.models.v1alpha1_cluster_config.V1alpha1ClusterConfig()  # noqa: E501
        if include_optional :
            return V1alpha1ClusterConfig(
                aws_auth_config = argocd_client.models.aws_auth_config_is_an_aws_iam_authentication_configuration.AWSAuthConfig is an AWS IAM authentication configuration(
                    cluster_name = '0', 
                    role_arn = '0', ), 
                bearer_token = '0', 
                password = '0', 
                tls_client_config = argocd_client.models.tls_client_config_contains_settings_to_enable_transport_layer_security.TLSClientConfig contains settings to enable transport layer security(
                    ca_data = 'YQ==', 
                    cert_data = 'YQ==', 
                    insecure = True, 
                    key_data = 'YQ==', 
                    server_name = '0', ), 
                username = '0'
            )
        else :
            return V1alpha1ClusterConfig(
        )

    def testV1alpha1ClusterConfig(self):
        """Test V1alpha1ClusterConfig"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
