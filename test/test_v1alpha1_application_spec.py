# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import argocd_client
from argocd_client.models.v1alpha1_application_spec import V1alpha1ApplicationSpec  # noqa: E501
from argocd_client.rest import ApiException

class TestV1alpha1ApplicationSpec(unittest.TestCase):
    """V1alpha1ApplicationSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha1ApplicationSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = argocd_client.models.v1alpha1_application_spec.V1alpha1ApplicationSpec()  # noqa: E501
        if include_optional :
            return V1alpha1ApplicationSpec(
                destination = argocd_client.models.application_destination_contains_deployment_destination_information.ApplicationDestination contains deployment destination information(
                    name = '0', 
                    namespace = '0', 
                    server = '0', ), 
                ignore_differences = [
                    argocd_client.models.v1alpha1_resource_ignore_differences.v1alpha1ResourceIgnoreDifferences(
                        group = '0', 
                        json_pointers = [
                            '0'
                            ], 
                        kind = '0', 
                        name = '0', 
                        namespace = '0', )
                    ], 
                info = [
                    argocd_client.models.v1alpha1_info.v1alpha1Info(
                        name = '0', 
                        value = '0', )
                    ], 
                project = '0', 
                revision_history_limit = '0', 
                source = argocd_client.models.v1alpha1_application_source.v1alpha1ApplicationSource(
                    chart = '0', 
                    directory = argocd_client.models.v1alpha1_application_source_directory.v1alpha1ApplicationSourceDirectory(
                        jsonnet = argocd_client.models.application_source_jsonnet_holds_jsonnet_specific_options.ApplicationSourceJsonnet holds jsonnet specific options(
                            ext_vars = [
                                argocd_client.models.jsonnet_var_is_a_jsonnet_variable.JsonnetVar is a jsonnet variable(
                                    code = True, 
                                    name = '0', 
                                    value = '0', )
                                ], 
                            libs = [
                                '0'
                                ], 
                            tlas = [
                                argocd_client.models.jsonnet_var_is_a_jsonnet_variable.JsonnetVar is a jsonnet variable(
                                    code = True, 
                                    name = '0', 
                                    value = '0', )
                                ], ), 
                        recurse = True, ), 
                    helm = argocd_client.models.application_source_helm_holds_helm_specific_options.ApplicationSourceHelm holds helm specific options(
                        file_parameters = [
                            argocd_client.models.helm_file_parameter_is_a_file_parameter_to_a_helm_template.HelmFileParameter is a file parameter to a helm template(
                                name = '0', 
                                path = '0', )
                            ], 
                        parameters = [
                            argocd_client.models.helm_parameter_is_a_parameter_to_a_helm_template.HelmParameter is a parameter to a helm template(
                                force_string = True, 
                                name = '0', 
                                value = '0', )
                            ], 
                        release_name = '0', 
                        value_files = [
                            '0'
                            ], 
                        values = '0', ), 
                    ksonnet = argocd_client.models.application_source_ksonnet_holds_ksonnet_specific_options.ApplicationSourceKsonnet holds ksonnet specific options(
                        environment = '0', 
                        parameters = [
                            argocd_client.models.ksonnet_parameter_is_a_ksonnet_component_parameter.KsonnetParameter is a ksonnet component parameter(
                                component = '0', 
                                name = '0', 
                                value = '0', )
                            ], ), 
                    kustomize = argocd_client.models.application_source_kustomize_holds_kustomize_specific_options.ApplicationSourceKustomize holds kustomize specific options(
                        common_labels = {
                            'key' : '0'
                            }, 
                        images = [
                            '0'
                            ], 
                        name_prefix = '0', 
                        name_suffix = '0', 
                        version = '0', ), 
                    path = '0', 
                    plugin = argocd_client.models.application_source_plugin_holds_config_management_plugin_specific_options.ApplicationSourcePlugin holds config management plugin specific options(
                        env = [
                            argocd_client.models.v1alpha1_env_entry.v1alpha1EnvEntry(
                                name = '0', 
                                value = '0', )
                            ], 
                        name = '0', ), 
                    repo_url = '0', 
                    target_revision = '0', ), 
                sync_policy = argocd_client.models.sync_policy_controls_when_a_sync_will_be_performed_in_response_to_updates_in_git.SyncPolicy controls when a sync will be performed in response to updates in git(
                    automated = argocd_client.models.sync_policy_automated_controls_the_behavior_of_an_automated_sync.SyncPolicyAutomated controls the behavior of an automated sync(
                        prune = True, 
                        self_heal = True, ), 
                    retry = argocd_client.models.v1alpha1_retry_strategy.v1alpha1RetryStrategy(
                        backoff = argocd_client.models.backoff_is_a_backoff_strategy_to_use_within_retry_strategy.Backoff is a backoff strategy to use within retryStrategy(
                            duration = '0', 
                            factor = '0', 
                            max_duration = '0', ), 
                        limit = '0', ), 
                    sync_options = [
                        '0'
                        ], )
            )
        else :
            return V1alpha1ApplicationSpec(
        )

    def testV1alpha1ApplicationSpec(self):
        """Test V1alpha1ApplicationSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
