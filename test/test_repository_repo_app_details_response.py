# coding: utf-8
# Copyright (c) 2020, Globo (https://github.com/globocom)
# License: BSD-3-Clause

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import argocd_client
from argocd_client.models.repository_repo_app_details_response import RepositoryRepoAppDetailsResponse  # noqa: E501
from argocd_client.rest import ApiException

class TestRepositoryRepoAppDetailsResponse(unittest.TestCase):
    """RepositoryRepoAppDetailsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test RepositoryRepoAppDetailsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = argocd_client.models.repository_repo_app_details_response.RepositoryRepoAppDetailsResponse()  # noqa: E501
        if include_optional :
            return RepositoryRepoAppDetailsResponse(
                directory = argocd_client.models.directory_app_spec_contains_directory.DirectoryAppSpec contains directory(), 
                helm = argocd_client.models.helm_app_spec_contains_helm_app_name__in_source_repo.HelmAppSpec contains helm app name  in source repo(
                    file_parameters = [
                        argocd_client.models.helm_file_parameter_is_a_file_parameter_to_a_helm_template.HelmFileParameter is a file parameter to a helm template(
                            name = '0', 
                            path = '0', )
                        ], 
                    name = '0', 
                    parameters = [
                        argocd_client.models.helm_parameter_is_a_parameter_to_a_helm_template.HelmParameter is a parameter to a helm template(
                            force_string = True, 
                            name = '0', 
                            value = '0', )
                        ], 
                    value_files = [
                        '0'
                        ], 
                    values = '0', ), 
                ksonnet = argocd_client.models.ksonnet_app_spec_contains_ksonnet_app_response
this_roughly_reflects:_ksonnet/ksonnet/metadata/app/schema/go.KsonnetAppSpec contains Ksonnet app response
This roughly reflects: ksonnet/ksonnet/metadata/app/schema.go(
                    environments = {
                        'key' : argocd_client.models.repository_ksonnet_environment.repositoryKsonnetEnvironment(
                            destination = argocd_client.models.repository_ksonnet_environment_destination.repositoryKsonnetEnvironmentDestination(
                                namespace = '0', 
                                server = '0', ), 
                            k8s_version = '0', 
                            name = '0', )
                        }, 
                    name = '0', 
                    parameters = [
                        argocd_client.models.ksonnet_parameter_is_a_ksonnet_component_parameter.KsonnetParameter is a ksonnet component parameter(
                            component = '0', 
                            name = '0', 
                            value = '0', )
                        ], ), 
                kustomize = argocd_client.models.kustomize_app_spec_contains_kustomize_images.KustomizeAppSpec contains kustomize images(
                    images = [
                        '0'
                        ], ), 
                type = '0'
            )
        else :
            return RepositoryRepoAppDetailsResponse(
        )

    def testRepositoryRepoAppDetailsResponse(self):
        """Test RepositoryRepoAppDetailsResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
