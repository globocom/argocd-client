# coding: utf-8
# Copyright (c) 2020, Globo (https://github.com/globocom)
# License: BSD-3-Clause

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import argocd_client
from argocd_client.models.v1alpha1_app_project_list import V1alpha1AppProjectList  # noqa: E501
from argocd_client.rest import ApiException

class TestV1alpha1AppProjectList(unittest.TestCase):
    """V1alpha1AppProjectList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha1AppProjectList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = argocd_client.models.v1alpha1_app_project_list.V1alpha1AppProjectList()  # noqa: E501
        if include_optional :
            return V1alpha1AppProjectList(
                items = [
                    argocd_client.models.app_project_provides_a_logical_grouping_of_applications,_providing_controls_for:
*_where_the_apps_may_deploy_to_(cluster_whitelist)
*_what_may_be_deployed_(repository_whitelist,_resource_whitelist/blacklist)
*_who_can_access_these_applications_(roles,_oidc_group_claims_bindings)
*_and_what_they_can_do_(rbac_policies)
*_automation_access_to_these_roles_(jwt_tokens)
+genclient
+genclient:no_status
+k8s:deepcopy_gen:interfaces=k8s/io/apimachinery/pkg/runtime/object
+kubebuilder:resource:path=appprojects,short_name=appproj;appprojs.AppProject provides a logical grouping of applications, providing controls for:
* where the apps may deploy to (cluster whitelist)
* what may be deployed (repository whitelist, resource whitelist/blacklist)
* who can access these applications (roles, OIDC group claims bindings)
* and what they can do (RBAC policies)
* automation access to these roles (JWT tokens)
+genclient
+genclient:noStatus
+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
+kubebuilder:resource:path=appprojects,shortName=appproj;appprojs(
                        metadata = argocd_client.models.v1_object_meta.v1ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = argocd_client.models.v1_time.v1Time(
                                nanos = 56, 
                                seconds = '0', ), 
                            deletion_grace_period_seconds = '0', 
                            deletion_timestamp = argocd_client.models.v1_time.v1Time(
                                nanos = 56, 
                                seconds = '0', ), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = '0', 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                argocd_client.models.v1_managed_fields_entry.v1ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = argocd_client.models.v1_fields_v1.v1FieldsV1(
                                        raw = 'YQ==', ), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = argocd_client.models.v1_time.v1Time(
                                        nanos = 56, 
                                        seconds = '0', ), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                argocd_client.models.v1_owner_reference.v1OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = argocd_client.models.app_project_spec_is_the_specification_of_an_app_project.AppProjectSpec is the specification of an AppProject(
                            cluster_resource_blacklist = [
                                argocd_client.models.group_kind_specifies_a_group_and_a_kind,_but_does_not_force_a_version/__this_is_useful_for_identifying
concepts_during_lookup_stages_without_having_partially_valid_types.GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying
concepts during lookup stages without having partially valid types(
                                    group = '0', 
                                    kind = '0', )
                                ], 
                            cluster_resource_whitelist = [
                                argocd_client.models.group_kind_specifies_a_group_and_a_kind,_but_does_not_force_a_version/__this_is_useful_for_identifying
concepts_during_lookup_stages_without_having_partially_valid_types.GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying
concepts during lookup stages without having partially valid types(
                                    group = '0', 
                                    kind = '0', )
                                ], 
                            description = '0', 
                            destinations = [
                                argocd_client.models.application_destination_contains_deployment_destination_information.ApplicationDestination contains deployment destination information(
                                    name = '0', 
                                    namespace = '0', 
                                    server = '0', )
                                ], 
                            namespace_resource_blacklist = [
                                argocd_client.models.group_kind_specifies_a_group_and_a_kind,_but_does_not_force_a_version/__this_is_useful_for_identifying
concepts_during_lookup_stages_without_having_partially_valid_types.GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying
concepts during lookup stages without having partially valid types(
                                    group = '0', 
                                    kind = '0', )
                                ], 
                            namespace_resource_whitelist = [
                                argocd_client.models.group_kind_specifies_a_group_and_a_kind,_but_does_not_force_a_version/__this_is_useful_for_identifying
concepts_during_lookup_stages_without_having_partially_valid_types.GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying
concepts during lookup stages without having partially valid types(
                                    group = '0', 
                                    kind = '0', )
                                ], 
                            orphaned_resources = argocd_client.models.orphaned_resources_monitor_settings_holds_settings_of_orphaned_resources_monitoring.OrphanedResourcesMonitorSettings holds settings of orphaned resources monitoring(
                                ignore = [
                                    argocd_client.models.v1alpha1_orphaned_resource_key.v1alpha1OrphanedResourceKey(
                                        group = '0', 
                                        kind = '0', 
                                        name = '0', )
                                    ], 
                                warn = True, ), 
                            roles = [
                                argocd_client.models.project_role_represents_a_role_that_has_access_to_a_project.ProjectRole represents a role that has access to a project(
                                    description = '0', 
                                    groups = [
                                        '0'
                                        ], 
                                    jwt_tokens = [
                                        argocd_client.models.jwt_token_holds_the_issued_at_and_expires_at_values_of_a_token.JWTToken holds the issuedAt and expiresAt values of a token(
                                            exp = '0', 
                                            iat = '0', 
                                            id = '0', )
                                        ], 
                                    name = '0', 
                                    policies = [
                                        '0'
                                        ], )
                                ], 
                            signature_keys = [
                                argocd_client.models.signature_key_is_the_specification_of_a_key_required_to_verify_commit_signatures_with.SignatureKey is the specification of a key required to verify commit signatures with(
                                    key_id = '0', )
                                ], 
                            source_repos = [
                                '0'
                                ], 
                            sync_windows = [
                                argocd_client.models.sync_window_contains_the_kind,_time,_duration_and_attributes_that_are_used_to_assign_the_sync_windows_to_apps.SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps(
                                    applications = [
                                        '0'
                                        ], 
                                    clusters = [
                                        '0'
                                        ], 
                                    duration = '0', 
                                    kind = '0', 
                                    manual_sync = True, 
                                    namespaces = [
                                        '0'
                                        ], 
                                    schedule = '0', )
                                ], ), 
                        status = argocd_client.models.app_project_status_contains_information_about_appproj.AppProjectStatus contains information about appproj(
                            jwt_tokens_by_role = {
                                'key' : argocd_client.models.v1alpha1_jwt_tokens.v1alpha1JWTTokens(
                                    items = [
                                        argocd_client.models.jwt_token_holds_the_issued_at_and_expires_at_values_of_a_token.JWTToken holds the issuedAt and expiresAt values of a token(
                                            exp = '0', 
                                            iat = '0', 
                                            id = '0', )
                                        ], )
                                }, ), )
                    ], 
                metadata = argocd_client.models.v1_list_meta.v1ListMeta(
                    continue = '0', 
                    remaining_item_count = '0', 
                    resource_version = '0', 
                    self_link = '0', )
            )
        else :
            return V1alpha1AppProjectList(
        )

    def testV1alpha1AppProjectList(self):
        """Test V1alpha1AppProjectList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
