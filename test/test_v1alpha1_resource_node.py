# coding: utf-8
# Copyright (c) 2020, Globo (https://github.com/globocom)
# License: BSD-3-Clause

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    The version of the OpenAPI document: version not set
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import argocd_client
from argocd_client.models.v1alpha1_resource_node import V1alpha1ResourceNode  # noqa: E501
from argocd_client.rest import ApiException

class TestV1alpha1ResourceNode(unittest.TestCase):
    """V1alpha1ResourceNode unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha1ResourceNode
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = argocd_client.models.v1alpha1_resource_node.V1alpha1ResourceNode()  # noqa: E501
        if include_optional :
            return V1alpha1ResourceNode(
                created_at = argocd_client.models.v1_time.v1Time(
                    nanos = 56, 
                    seconds = '0', ), 
                health = argocd_client.models.v1alpha1_health_status.v1alpha1HealthStatus(
                    message = '0', 
                    status = '0', ), 
                images = [
                    '0'
                    ], 
                info = [
                    argocd_client.models.info_item_contains_human_readable_information_about_object.InfoItem contains human readable information about object(
                        name = '0', 
                        value = '0', )
                    ], 
                networking_info = argocd_client.models.resource_networking_info_holds_networking_resource_related_information.ResourceNetworkingInfo holds networking resource related information(
                    external_ur_ls = [
                        '0'
                        ], 
                    ingress = [
                        argocd_client.models.v1_load_balancer_ingress.v1LoadBalancerIngress(
                            hostname = '0', 
                            ip = '0', )
                        ], 
                    labels = {
                        'key' : '0'
                        }, 
                    target_labels = {
                        'key' : '0'
                        }, 
                    target_refs = [
                        argocd_client.models.resource_ref_includes_fields_which_unique_identify_resource.ResourceRef includes fields which unique identify resource(
                            group = '0', 
                            kind = '0', 
                            name = '0', 
                            namespace = '0', 
                            uid = '0', 
                            version = '0', )
                        ], ), 
                parent_refs = [
                    argocd_client.models.resource_ref_includes_fields_which_unique_identify_resource.ResourceRef includes fields which unique identify resource(
                        group = '0', 
                        kind = '0', 
                        name = '0', 
                        namespace = '0', 
                        uid = '0', 
                        version = '0', )
                    ], 
                resource_ref = argocd_client.models.resource_ref_includes_fields_which_unique_identify_resource.ResourceRef includes fields which unique identify resource(
                    group = '0', 
                    kind = '0', 
                    name = '0', 
                    namespace = '0', 
                    uid = '0', 
                    version = '0', ), 
                resource_version = '0'
            )
        else :
            return V1alpha1ResourceNode(
        )

    def testV1alpha1ResourceNode(self):
        """Test V1alpha1ResourceNode"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
